pipeline {
    agent any
    
    tools {
        maven 'Maven-3.9.4'
        nodejs 'NodeJS-18'
    }
    
    environment {
        DOCKER_HUB_REPO = 'gestao-tarefas'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = 'gestao-tarefas'
        KUBECONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Build Backend') {
            steps {
                dir('.') {
                    sh '''
                        echo "Building Spring Boot application..."
                        mvn clean compile -DskipTests
                    '''
                }
            }
        }
        
        stage('Test Backend') {
            steps {
                dir('.') {
                    sh '''
                        echo "Running backend tests..."
                        mvn test
                        mvn jacoco:report
                    '''
                }
                publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
            }
        }
        
        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh '''
                        echo "Building Angular application..."
                        npm ci
                        npm run build --prod
                        npm run test -- --watch=false --browsers=ChromeHeadless
                    '''
                }
            }
        }
        
        stage('Code Quality Analysis') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh '''
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                    -Dsonar.host.url=$SONAR_HOST_URL \
                                    -Dsonar.login=$SONAR_AUTH_TOKEN
                            '''
                        }
                    }
                }
                
                stage('OWASP Dependency Check') {
                    steps {
                        dependencyCheck additionalArguments: '--format XML --format HTML', odcInstallation: 'OWASP-DC'
                        dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Backend Image') {
                    steps {
                        script {
                            def backendImage = docker.build("${DOCKER_HUB_REPO}-backend:${DOCKER_TAG}", "-f devops/docker/Dockerfile.backend .")
                            docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                                backendImage.push()
                                backendImage.push('latest')
                            }
                        }
                    }
                }
                
                stage('Frontend Image') {
                    steps {
                        script {
                            def frontendImage = docker.build("${DOCKER_HUB_REPO}-frontend:${DOCKER_TAG}", "-f devops/docker/Dockerfile.frontend .")
                            docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                                frontendImage.push()
                                frontendImage.push('latest')
                            }
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('Backend Security Scan') {
                    steps {
                        sh '''
                            echo "Scanning backend image for vulnerabilities..."
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                aquasec/trivy image ${DOCKER_HUB_REPO}-backend:${DOCKER_TAG}
                        '''
                    }
                }
                
                stage('Frontend Security Scan') {
                    steps {
                        sh '''
                            echo "Scanning frontend image for vulnerabilities..."
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                aquasec/trivy image ${DOCKER_HUB_REPO}-frontend:${DOCKER_TAG}
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    sh '''
                        echo "Deploying to staging environment..."
                        cd devops
                        docker-compose -f docker-compose.staging.yml down
                        docker-compose -f docker-compose.staging.yml up -d
                    '''
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                branch 'develop'
            }
            steps {
                sh '''
                    echo "Running integration tests..."
                    cd tests
                    npm install
                    npm run test:integration
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    input message: 'Deploy to production?', ok: 'Deploy'
                    sh '''
                        echo "Deploying to production..."
                        kubectl set image deployment/gestao-tarefas-backend \
                            gestao-tarefas-backend=${DOCKER_HUB_REPO}-backend:${DOCKER_TAG}
                        kubectl set image deployment/gestao-tarefas-frontend \
                            gestao-tarefas-frontend=${DOCKER_HUB_REPO}-frontend:${DOCKER_TAG}
                        kubectl rollout status deployment/gestao-tarefas-backend
                        kubectl rollout status deployment/gestao-tarefas-frontend
                    '''
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup
            sh 'docker system prune -f'
            
            // Archive artifacts
            archiveArtifacts artifacts: 'target/*.jar,frontend/dist/**/*', fingerprint: true
            
            // Cleanup workspace
            cleanWs()
        }
        
        success {
            // Slack notification
            slackSend(
                channel: '#deployments',
                color: 'good',
                message: "✅ Deployment successful: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }
        
        failure {
            // Slack notification
            slackSend(
                channel: '#deployments',
                color: 'danger',
                message: "❌ Deployment failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }
    }
}
