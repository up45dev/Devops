apiVersion: v1
kind: Namespace
metadata:
  name: gestao-tarefas
  labels:
    name: gestao-tarefas
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: gestao-tarefas
data:
  SPRING_PROFILES_ACTIVE: "production"
  SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-service:5432/gestao_tarefas"
  SPRING_DATASOURCE_USERNAME: "admin"
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,metrics,prometheus"
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: "always"
  MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: gestao-tarefas
type: Opaque
data:
  SPRING_DATASOURCE_PASSWORD: YWRtaW4xMjM= # admin123 base64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gestao-tarefas-backend
  namespace: gestao-tarefas
  labels:
    app: gestao-tarefas-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gestao-tarefas-backend
  template:
    metadata:
      labels:
        app: gestao-tarefas-backend
    spec:
      containers:
      - name: gestao-tarefas-backend
        image: gestao-tarefas-backend:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-secret
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: gestao-tarefas
spec:
  selector:
    app: gestao-tarefas-backend
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gestao-tarefas-frontend
  namespace: gestao-tarefas
  labels:
    app: gestao-tarefas-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gestao-tarefas-frontend
  template:
    metadata:
      labels:
        app: gestao-tarefas-frontend
    spec:
      containers:
      - name: gestao-tarefas-frontend
        image: gestao-tarefas-frontend:latest
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: gestao-tarefas
spec:
  selector:
    app: gestao-tarefas-frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gestao-tarefas-ingress
  namespace: gestao-tarefas
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - gestao-tarefas.example.com
    secretName: gestao-tarefas-tls
  rules:
  - host: gestao-tarefas.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
